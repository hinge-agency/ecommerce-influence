(function () {
/**
 * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                //Lop off the last part of baseParts, so that . matches the
                //"directory" and not name of the baseName's module. For instance,
                //baseName of "one/two/three", maps to "one/two/three.js", but we
                //want the directory, "one/two" for this normalization.
                name = baseParts.slice(0, baseParts.length - 1).concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("../vendor/almond", function(){});

if ( typeof jQuery === 'function' ) {
	define( 'jquery', function ( $ ) { return jQuery; } );
}

if (typeof _ === 'function') {
	define( 'underscore', function () { return _; });
}

require(['jquery', 'underscore'], function($, _) {
	function urlCanon(url) {
		url = url.replace(/^https?:\/\//, ''); // Remove protocol
		url = url.replace(/\?.*$/, '');        // Remove query string
		return url;
	}
	
	function timeWithColons(time) {
		var seconds = time % 60;
		var minutes = Math.floor(time / 60) % 60;
		var hours = Math.floor(time / 3600);
		var secPad = seconds < 10 ? "0" : "";
		var minPad = minutes < 10 ? "0" : "";
		if (hours == 0)
			return minutes + ":" + secPad + seconds;
		return hours + ":" + minPad + minutes + ":" + secPad + seconds;
	}
	
	const headerRowTemplate =
			'<div class="spp-timestamp-row">' +
				'<span class="spp-timestamp-button-buffer"></span>' +
				'<span class="spp-timestamp-column-header spp-timestamp-time">Time</span>' +
				'<span class="spp-timestamp-column-header spp-timestamp-text">Text</span>' +
			'</div>';
	const partialRowTemplate = 
			'<div class="spp-timestamp-row">' +
				'<button type="button" class="spp-add-button">' +
					'<span class="dashicons dashicons-plus"></span>' +
				'</button>' +
			'</div>';
	const fullRowTemplate = 
			'<div class="spp-timestamp-row spp-timestamp-full-row">' +
				'<button type="button" class="spp-remove-button">' +
					'<span class="dashicons dashicons-no"></span>' +
				'</button>' +
				'<input type="text" class="spp-timestamp-time" size="4" value="" ' +
						'name="spp_player_timestamps[dump]" >' +
				'<input type="text" class="spp-timestamp-text" size="70" value="" ' +
					'name="spp_player_timestamps[dump]">' +
			'</div>';
	const hiddenRowTemplate = 
			'<input type="hidden" name="spp_player_timestamps[stamps][<%= stream_url %>][<%= time %>]" ' +
					'value="<%= text %>">';
	
	// Add a row to the Timestamps page.  Returns the last complete row.
	function addTimestampRow() {
		var oldRowTemplate = _.template(fullRowTemplate);
		var oldRow = $(oldRowTemplate());
		$(".spp-add-button").closest(".spp-timestamp-row").replaceWith(oldRow);
		oldRow.find(".spp-remove-button").click(removeTimestampRow);
		oldRow.find(".spp-timestamp-time").change(disableTrackSelector);
		oldRow.find(".spp-timestamp-text").change(disableTrackSelector);
		
		var newRow = $(partialRowTemplate);
		newRow.find(".spp-add-button").click(addTimestampRow);
		$(".spp-timestamp-table").append(newRow);
		return oldRow;
	}
	
	// Remove a row from the Timestamps page
	function removeTimestampRow(e) {
		var row = $(e.currentTarget).closest(".spp-timestamp-row");
		row.remove();
	}
	
	function getRef(track) {
		// If the ref already exists, use that
		var ref = _.invert(SmartPodcastPlayerAdmin.timestamp_refs)[urlCanon(track.stream_url)];
		if (ref)
			return ref;
		// Otherwise, shorten the title (no double quotes)
		var ref = track.title.replace('"', '').substring(0, 6);
		// If this ref exists, add a number until it doesn't
		var i = 1, orig_ref = ref;
		while (_.keys(SmartPodcastPlayerAdmin.timestamp_refs).includes(ref)) {
			ref = orig_ref + "-" + i;
			i = i + 1;
		}
		return ref;
	}
	
	function showRefOptions(track) {
		var ref = getRef(track);
		$('.spp-timestamp-ref').val(ref);
		$('.spp-timestamp-ref').attr('name', 'spp_player_timestamps[refs][' + urlCanon(track.stream_url) + ']');
		$('.spp-timestamp-shortcode').text('[stp_timestamps ref="' + ref + '"]');
		$('.spp-copy-timestamp-shortcode').click(copyShortcodeText);
		$(".spp-timestamp-reference-options").show();
	}
	
	function disableTrackSelector() {
		$("#spp-track-picker").attr("disabled", "disabled");
		$(".spp-track-selector-helper").show();
	}
	
	function enableTrackSelector() {
		$("#spp-track-picker").removeAttr('disabled');
		$(".spp-track-selector-helper").hide();
	}
	
	function selectTrack() {
		// Kill the old table
		$('.spp-timestamp-row').remove();
		// Start a new table
		$('.spp-timestamp-table').append(_.template(headerRowTemplate));
		var index = $('#spp-track-picker').val();
		var track = sppTracks[index];
		addTimestampRow(); // Will be an empty "+" row
		if (!track.timestamps || track.timestamps.length == 0) {
			// Add another empty row to get started
			var lastRow = addTimestampRow();
			$(".spp-timestamp-reference-options").hide();
			lastRow.find('.spp-timestamp-time').change(function(e) {
				showRefOptions(track);
				disableTrackSelector();
			});
		} else {
			// Pull any timestamps that are already in the DB
			var pairs = _.pairs(track.timestamps);
			for (var i = 0; i < pairs.length; i++) {
				var lastRow = addTimestampRow();
				lastRow.find('.spp-timestamp-time').val(timeWithColons(pairs[i][0]));
				lastRow.find('.spp-timestamp-text').val(pairs[i][1]);
			}
			showRefOptions(track);
		}
	}
	
	function copyShortcodeText() {
		var textArea = document.createElement("textarea");
		textArea.value = $('.spp-timestamp-shortcode').text();
		document.body.appendChild(textArea);
		textArea.select();
		document.execCommand('copy');
		document.body.removeChild(textArea);
	}
	
	var sppTracks = [];
	
	// We're on the Timestamps page.  Start with an Ajax call to get the tracks
	function loadFeed() {
		var feed_url = $('#spp-timestamps-feed-url').val();
		$('.spp-feed-error').css('display', 'none');
		$('.spp-loading-feed').css('display', 'block');
		$.ajax({
			url: SmartPodcastPlayerAdmin.ajax_url,
			dataType: 'json',
			type: 'POST',
			async: true,
			data: {
				action: 'get_spplayer_tracks',
				stream: feed_url,
			},
			success: function(tracks) {
				$('.spp-loading-feed').css('display', 'none');
				if( tracks.length == 0  || (typeof tracks == "object" && tracks.error_data)) {
					console.log( 'Could not retrieve data from the feed.  Check to ensure the feed is valid.' );
					$('.spp-feed-error').css('display', 'block');
					return;
				}
				sppTracks = tracks;
				var trackPicker = $("<select id='spp-track-picker'>");
				var selIndex = -1;
				_.each(tracks, function(el, index) {
					trackPicker.append($("<option>").attr('value', index).text(el.title));
					if (SmartPodcastPlayerAdmin.last_timestamp_set == urlCanon(el.stream_url))
						selIndex = index;
				});
				if (selIndex !== -1)
					trackPicker[0].selectedIndex = selIndex;
				trackPicker.change(selectTrack);
				$(".spp-timestamp-table").before(trackPicker);
				selectTrack();
			},
			error: function(e) {
				$('.spp-loading-feed').css('display', 'none');
				$('.spp-feed-error').css('display', 'block');
			},
		});
	}
	loadFeed();
	$('#spp-reload-feed').click(function(e) {
		loadFeed();
	});
	
	$('.spp-settings-form').submit(function(e) {
		// Add a hidden input for each row (time=>text)
		var track = sppTracks[$('#spp-track-picker').val()];
		var stream_url = urlCanon(track.stream_url);
		var times = _.map($('.spp-timestamp-time'), function(t) {return t.value;})
		var texts = _.map($('.spp-timestamp-text'), function(t) {return t.value;})
		var inputTemplate = _.template(hiddenRowTemplate);
		for (var i = 0; i < times.length; i++) {
			$(e.target).append(inputTemplate({
				stream_url: stream_url,
				time: times[i],
				text: texts[i],
			}));
		}
		return true;
	});
	
	$('.spp-timestamp-ref').keypress(function(e) {
		// Reject double quotes
		if (e.key === '"')
			e.preventDefault();
	});
	$('.spp-timestamp-ref').keyup(function(e) {
		$('.spp-timestamp-shortcode').text('[stp_timestamps ref="' + e.currentTarget.value + '"]');
		disableTrackSelector();
	});
	
	$('#spp-timestamps-revert').click(function() {
		selectTrack();
		enableTrackSelector();
	});
	
});
	
define("timestamps-settings", function(){});

}());